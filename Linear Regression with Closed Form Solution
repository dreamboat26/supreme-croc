After seeing the problem, your classmate Alice immediately argues that we can apply a linear regression model, as the labels are numbers from 0-9, very similar to the example we learned from Unit 1. 
Though being a little doubtful, you decide to have a try and start simple by using the raw pixel values of each image as features.

Alice wrote a skeleton code run_linear_regression_on_MNIST in main.py, but she needs your help to complete the code and make the model work. 

# Closed Form Solution of Linear Regression 
To solve the linear regression problem, you recall the linear regression has a closed form solution:
theta = (XX^T+lambda*I)^-1*X^T*Y ,  where I is the identity matrix. 
Write a function closed_form that computes this closed form solution given the features X, labels Y and the regularization parameter lambda.

def closed_form(X, Y, lambda_factor):
    """
    Computes the closed form solution of linear regression with L2 regularization

    Args:
        X - (n, d + 1) NumPy array (n datapoints each with d features plus the bias feature in the first dimension)
        Y - (n, ) NumPy array containing the labels (a number from 0-9) for each
            data point
        lambda_factor - the regularization constant (scalar)
    Returns:
        theta - (d + 1, ) NumPy array containing the weights of linear regression. Note that theta[0]
        represents the y-axis intercept of the model and therefore X[0] = 1
    """
    newX=np.transpose(X)
    xterm=np.dot(newX,X)+(lambda_factor*np.identity(newX.shape[0])) 
    xterm=np.linalg.inv(xterm)
    yterm=np.dot(newX,Y)
    return np.dot(xterm,yterm)

