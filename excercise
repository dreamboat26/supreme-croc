 As introduced in the previous section, a neural network is a powerful tool often utilized in machine learning. 
 Because neural networks are, fundamentally, very mathematical, we will ll use them to motivate Numpy
 We review the simplest neural network here. 

 he output of the neural network, , is dependent on the inputs. The importance of each of the inputs is given by values called weights. 
 There is one weight from each input to each output. 

 The inputs are given by , and the outputs are given by . 
 Here, is the weight of input 1 on output 1 (our only output in this case), and is the weight of input 2 on output 1. 
 In general, represents the weight of input on output .
 The output, , is given by z1=f(w11x1+w22x2) where is a specified nonlinear function, and it is usually the 
 hyperbolic tangent function,tanh.

# Neural Network
Here, we will write a function neural_network, which will apply a neural network operation with 2 inputs and 1 output and a given weight matrix. 

def neural_network(inputs, weights):
    """
     Takes an input vector and runs it through a 1-layer neural network
     with a given weight matrix and returns the output.

     Arg:
       inputs - 2 x 1 NumPy array
       weights - 2 x 1 NumPy array
     Returns (in this order):
       out - a 1 x 1 NumPy array, representing the output of the neural network
    """
    #Your code here
    Z = np.tanh(weights.T @ inputs)
    return Z

