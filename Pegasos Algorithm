 Now you will implement the Pegasos algorithm. For more information, refer to the original paper at original paper.

#  Pegasos Single Step Update 
Next you will implement the single step update for the Pegasos algorithm. This function is very similar to the function that you implemented in Perceptron Single Step Update, except that it should utilize the Pegasos parameter update rules instead of those for perceptron. 
The function will also be passed a lambda and value eitha to use for updates. 

def pegasos_single_step_update(feature_vector,label,L,eta,current_theta,current_theta_0):
     if label * (np.sum(feature_vector * current_theta) + current_theta_0) <= 1 :
        new_theta = (1 - eta*L)*current_theta  +  eta*label*feature_vector
        new_theta_0 = current_theta_0 + eta*label 
     else:
        new_theta = (1 - eta*L)*current_theta
        new_theta_0 = current_theta_0
     return (new_theta, new_theta_0)

#  Full Pegasos Algorithm 
def pegasos(feature_matrix, labels, T, L):
    (nsamples, nfeatures) = feature_matrix.shape
    theta = np.zeros(nfeatures)
    theta_0 = 0
    count = 0
    for t in range(T):
        for i in get_order(nsamples):
            count += 1
            eta = 1.0 / np.sqrt(count)
            (theta, theta_0) = pegasos_single_step_update(
                feature_matrix[i], labels[i], L, eta, theta, theta_0)
    return (theta, theta_0)



