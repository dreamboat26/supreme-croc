In machine learning, there a lot of reasons why a model would fail to perform well. 
The model could be poorly designed, the data could be too noisy, it could just be a poor initialization, or a poor choice of hyperparameters, etc. 
Therefore, it is vital to at least exclude engineering bugs using a debugger.
Fortunately, Python comes with a fully functional interactive debugger called pdb.
Before you tackle the last problem of this project, we recommend you take some time to learn how to use, for example with this tutorial.

# Debugging exercise 
 In this problem, you are given a buggy piece of code and are asked to debug it.

The goal of this exercise is for you to set up a working debugging system for yourselves.

The function get_sum_metrics takes two arguments: a prediction and a list of metrics to apply to the prediction (say, for instance, the accuracy or the precision). 
  Note that each metric is a function, not a number. 
  The function should compute each of the metrics for the prediction and sum them. 
  It should also add to this sum three default metrics, in this case, adding 0, 1 or 2 to the prediction. 

def get_sum_metrics(predictions, metrics=None):
    if metrics is None:
        metrics = []
    
    for i in range(3):
        metrics.append(lambda x,i=i: x+i)

    sum_metrics = 0
    for metric in metrics:
        sum_metrics += metric(predictions)

    return sum_metrics
